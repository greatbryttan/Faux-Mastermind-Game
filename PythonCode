import random

COLORS = ["R", "G", "B", "Y", "W", "O"]
ATTEMPTS = 10
COMBO_LENGTH = 4


def generate_code():
    code = []

    for _ in range(COMBO_LENGTH):
        color = random.choice(COLORS)
        code.append(color)

    return code


def guess_code():

    while True:
        guess = input("Guess: ").upper().split()

        if len(guess) != 4:
            print(f"You must guess {COMBO_LENGTH} colors with spaces in between.")
            continue

        for color in guess:
            if color not in COLORS:
                print(f"Invalid color: {color}. Try again.")
                break
        else:
            break

    return guess


def check_code(guess, real_code):
    color_counts = {}
    correct_positions = 0
    incorrect_positions = 0

    for color in real_code:
        if color not in color_counts:
            color_counts[color] = 0
        color_counts[color] += 1

    for guess_color, real_color in zip(guess, real_code):
        if guess_color == real_color:
            correct_positions += 1
            if color_counts[guess_color] > 0:
                color_counts[guess_color] -= 1
        elif guess_color in color_counts and color_counts[guess_color] > 0:
            incorrect_positions += 1
            color_counts[guess_color] -= 1

    return correct_positions, incorrect_positions


def game():
    print(f"Welcome to Mastermind. You have {ATTEMPTS} attempts to guess the correct {COMBO_LENGTH}-color combination. ")
    print("The only valid colors are:", *COLORS)

    code = generate_code()
    for attempts in range(1, ATTEMPTS + 1):
        guess = guess_code()
        correct_positions, incorrect_positions = check_code(guess, code)

        if correct_positions == COMBO_LENGTH:
            print(f"You figured it out in {attempts} attempts!")
            break

        print(f"Correct positions: {correct_positions} | Incorrect positions: {incorrect_positions}.")

    else:
        print("You maxed out your attempts! The correct combination was:", *code)


if __name__ == "__main__":
    game()
